// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class-declaration.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================


class    a {
  b(   ) {}
}

let    x
=====================================output=====================================


class a {
  b() {}
}

let    x
================================================================================
`;

exports[`different-levels.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
call(1,2,3)
call(1,2,3)
function f() {
  call(1,2,3)
}

=====================================output=====================================
call(1,2,3)
call(1, 2, 3);
function f() {
  call(1, 2, 3);
}

================================================================================
`;

exports[`function-declaration.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function ugly ( {a=1,     b     =   2     }      ) {}

=====================================output=====================================
function ugly({ a = 1, b = 2 }) {}

================================================================================
`;

exports[`ignore-indentation.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function ugly ( {a=1,     b     =   2     }      ) {
  function ugly ( {a=1,     b     =   2     }      ) {
    function ugly ( {a=1,     b     =   2     }      ) {
  	  	     \`multiline template string
              with too much indentation\`
    }
  }
}

=====================================output=====================================
function ugly ( {a=1,     b     =   2     }      ) {
  function ugly ( {a=1,     b     =   2     }      ) {
    function ugly ( {a=1,     b     =   2     }      ) {
  	  	     \`multiline template string
              with too much indentation\`;
    }
  }
}

================================================================================
`;

exports[`large-dict.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function ugly() {
  const dictWithSeveralEntries = {
    key:          "value",
    anotherKey:   "another value",
    firstNumber:  1,
    secondNumber: 2
  };
}

=====================================output=====================================
function ugly() {
  const dictWithSeveralEntries = {
    key: "value",
    anotherKey: "another value",
    firstNumber: 1,
    secondNumber: 2,
  };
}

================================================================================
`;

exports[`module-export1.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
import  def , {named}  from    'x'

export *  from   'd'

export    const  x
  =  42

export   default    42


=====================================output=====================================
import  def , {named}  from    'x'

export * from "d";

export    const  x
  =  42

export   default    42


================================================================================
`;

exports[`module-export2.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
import  def , {named}  from    'x'

export *  from   'd'

export    const  x
  =  42

export   default    42


=====================================output=====================================
import  def , {named}  from    'x'

export *  from   'd'

export const x = 42;

export   default    42


================================================================================
`;

exports[`module-export3.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
import  def , {named}  from    'x'

export *  from   'd'

export    const  x
  =  42

export   default    42


=====================================output=====================================
import  def , {named}  from    'x'

export *  from   'd'

export    const  x
  =  42

export default 42;


================================================================================
`;

exports[`module-import.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
import  def , {named}  from    'x'

export *  from   'd'

export    const  x
  =  42

export   default    42


=====================================output=====================================
import def, { named } from "x";

export *  from   'd'

export    const  x
  =  42

export   default    42


================================================================================
`;

exports[`multiple-statements.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
call(
  1, 2,3
);

call(
  1, 2,3
);

call(
  1, 2,3
);

call(
  1, 2,3
);

=====================================output=====================================
call(
  1, 2,3
);

call(1, 2, 3);

call(1, 2, 3);

call(
  1, 2,3
);

================================================================================
`;

exports[`multiple-statements2.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
call(
  1, 2,3
);

call(
  1, 2,3
);

call(
  1, 2,3
);

call(
  1, 2,3
);

=====================================output=====================================
call(
  1, 2,3
);

call(1, 2, 3);

call(1, 2, 3);

call(
  1, 2,3
);

================================================================================
`;

exports[`nested.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
try {
  if (condition) {
    body
  }
}
catch (err) {}

=====================================output=====================================
try {
  if (condition) {
    body;
  }
} catch (err) {}

================================================================================
`;

exports[`nested-print-width.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function f() {
  if (true) {
    call("this line is 79 chars", "long", "it should", "stay as single line");
  }
}

=====================================output=====================================
function f() {
  if (true) {
    call("this line is 79 chars", "long", "it should", "stay as single line");
  }
}

================================================================================
`;

exports[`nested2.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
try {
  if (condition) {
    body
  }
}
catch (err) {}

=====================================output=====================================
try {
  if (condition) {
    body;
  }
}
catch (err) {}

================================================================================
`;

exports[`nested3.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
try {
1;if (condition) {
    body
  }
}
catch (err) {}

=====================================output=====================================
try {
1;if (condition) {
    body;
  }
}
catch (err) {}

================================================================================
`;

exports[`object-expression.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
const y = {a:1, b:2}

=====================================output=====================================
const y = { a: 1, b: 2 };

================================================================================
`;

exports[`object-expression2.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================

const y =       [
    {
                a: 1,
    },
    {
              a: 1,
              b:2
    },
]

=====================================output=====================================

const y = [
  {
    a: 1,
  },
  {
    a: 1,
    b: 2,
  },
];

================================================================================
`;

exports[`range.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
function ugly ( {a=1,     b     =   2     }      ) {
  function ugly ( {a=1,     b     =   2     }      ) {
    function ugly ( {a=1,     b     =   2     }      ) {
             \`multiline template string
              with too much indentation\`
    }
  }
}

=====================================output=====================================
function ugly ( {a=1,     b     =   2     }      ) {
  function ugly ( {a=1,     b     =   2     }      ) {
    function ugly ( {a=1,     b     =   2     }      ) {
             \`multiline template string
              with too much indentation\`;
    }
  }
}

================================================================================
`;

exports[`range-end.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// Unchanged
call(
  1, 2,3
);


call(
  1, 2,3
);
=====================================output=====================================
// Unchanged
call(
  1, 2,3
);


call(1, 2, 3);
================================================================================
`;

exports[`range-start.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
call(
  1, 2,3
);


// Unchanged
call(
  1, 2,3
);

=====================================output=====================================
call(1, 2, 3);


// Unchanged
call(
  1, 2,3
);

================================================================================
`;

exports[`try-catch.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
try {}
catch (err) {}

=====================================output=====================================
try {
} catch (err) {}

================================================================================
`;

exports[`whitespace.js format 1`] = `
====================================options=====================================
parsers: ["flow", "typescript"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
 

=====================================output=====================================
 

================================================================================
`;
