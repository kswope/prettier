// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`classes.js - {"quoteProps":"as-needed"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "as-needed"
                                                                                | printWidth
=====================================input======================================
class A {
  a = "a"
};

class B {
  'b' = "b"
};

class C {
  c1 = "c1"
  'c2' = "c2"
};

class D {
  d1 = "d1"
  'd-2' = "d2"
};

=====================================output=====================================
class A {
  a = "a";
}

class B {
  b = "b";
}

class C {
  c1 = "c1";
  c2 = "c2";
}

class D {
  d1 = "d1";
  "d-2" = "d2";
}

================================================================================
`;

exports[`classes.js - {"quoteProps":"consistent","singleQuote":true} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "consistent"
singleQuote: true
                                                                                | printWidth
=====================================input======================================
class A {
  a = "a"
};

class B {
  'b' = "b"
};

class C {
  c1 = "c1"
  'c2' = "c2"
};

class D {
  d1 = "d1"
  'd-2' = "d2"
};

=====================================output=====================================
class A {
  a = 'a';
}

class B {
  b = 'b';
}

class C {
  c1 = 'c1';
  c2 = 'c2';
}

class D {
  'd1' = 'd1';
  'd-2' = 'd2';
}

================================================================================
`;

exports[`classes.js - {"quoteProps":"consistent"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "consistent"
                                                                                | printWidth
=====================================input======================================
class A {
  a = "a"
};

class B {
  'b' = "b"
};

class C {
  c1 = "c1"
  'c2' = "c2"
};

class D {
  d1 = "d1"
  'd-2' = "d2"
};

=====================================output=====================================
class A {
  a = "a";
}

class B {
  b = "b";
}

class C {
  c1 = "c1";
  c2 = "c2";
}

class D {
  "d1" = "d1";
  "d-2" = "d2";
}

================================================================================
`;

exports[`classes.js - {"quoteProps":"preserve"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "preserve"
                                                                                | printWidth
=====================================input======================================
class A {
  a = "a"
};

class B {
  'b' = "b"
};

class C {
  c1 = "c1"
  'c2' = "c2"
};

class D {
  d1 = "d1"
  'd-2' = "d2"
};

=====================================output=====================================
class A {
  a = "a";
}

class B {
  "b" = "b";
}

class C {
  c1 = "c1";
  "c2" = "c2";
}

class D {
  d1 = "d1";
  "d-2" = "d2";
}

================================================================================
`;

exports[`objects.js - {"quoteProps":"as-needed"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "as-needed"
                                                                                | printWidth
=====================================input======================================
const a = {
  a: "a"
};

const b = {
  'b': "b"
};

const c = {
  c1: "c1",
  'c2': "c2"
};

const d = {
  d1: "d1",
  'd-2': "d2"
};

=====================================output=====================================
const a = {
  a: "a",
};

const b = {
  b: "b",
};

const c = {
  c1: "c1",
  c2: "c2",
};

const d = {
  d1: "d1",
  "d-2": "d2",
};

================================================================================
`;

exports[`objects.js - {"quoteProps":"consistent","singleQuote":true} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "consistent"
singleQuote: true
                                                                                | printWidth
=====================================input======================================
const a = {
  a: "a"
};

const b = {
  'b': "b"
};

const c = {
  c1: "c1",
  'c2': "c2"
};

const d = {
  d1: "d1",
  'd-2': "d2"
};

=====================================output=====================================
const a = {
  a: 'a',
};

const b = {
  b: 'b',
};

const c = {
  c1: 'c1',
  c2: 'c2',
};

const d = {
  'd1': 'd1',
  'd-2': 'd2',
};

================================================================================
`;

exports[`objects.js - {"quoteProps":"consistent"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "consistent"
                                                                                | printWidth
=====================================input======================================
const a = {
  a: "a"
};

const b = {
  'b': "b"
};

const c = {
  c1: "c1",
  'c2': "c2"
};

const d = {
  d1: "d1",
  'd-2': "d2"
};

=====================================output=====================================
const a = {
  a: "a",
};

const b = {
  b: "b",
};

const c = {
  c1: "c1",
  c2: "c2",
};

const d = {
  "d1": "d1",
  "d-2": "d2",
};

================================================================================
`;

exports[`objects.js - {"quoteProps":"preserve"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "preserve"
                                                                                | printWidth
=====================================input======================================
const a = {
  a: "a"
};

const b = {
  'b': "b"
};

const c = {
  c1: "c1",
  'c2': "c2"
};

const d = {
  d1: "d1",
  'd-2': "d2"
};

=====================================output=====================================
const a = {
  a: "a",
};

const b = {
  "b": "b",
};

const c = {
  c1: "c1",
  "c2": "c2",
};

const d = {
  d1: "d1",
  "d-2": "d2",
};

================================================================================
`;

exports[`with_member_expressions.js - {"quoteProps":"as-needed"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "as-needed"
                                                                                | printWidth
=====================================input======================================
const obj = {
  foo: "",
  [foo.bar]: ""
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

=====================================output=====================================
const obj = {
  foo: "",
  [foo.bar]: "",
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

================================================================================
`;

exports[`with_member_expressions.js - {"quoteProps":"consistent","singleQuote":true} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "consistent"
singleQuote: true
                                                                                | printWidth
=====================================input======================================
const obj = {
  foo: "",
  [foo.bar]: ""
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

=====================================output=====================================
const obj = {
  foo: '',
  [foo.bar]: '',
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

================================================================================
`;

exports[`with_member_expressions.js - {"quoteProps":"consistent"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "consistent"
                                                                                | printWidth
=====================================input======================================
const obj = {
  foo: "",
  [foo.bar]: ""
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

=====================================output=====================================
const obj = {
  foo: "",
  [foo.bar]: "",
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

================================================================================
`;

exports[`with_member_expressions.js - {"quoteProps":"preserve"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "preserve"
                                                                                | printWidth
=====================================input======================================
const obj = {
  foo: "",
  [foo.bar]: ""
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

=====================================output=====================================
const obj = {
  foo: "",
  [foo.bar]: "",
};

class Foo {
  foo() {}
  [foo.bar]() {}
}

================================================================================
`;

exports[`with_numbers.js - {"quoteProps":"as-needed"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "as-needed"
                                                                                | printWidth
=====================================input======================================
obj = {
  foo: "",
  1: ""
};

obj = {
  "bar": "",
  1: ""
};

obj = {
  "foo-bar": "",
  1: ""
};

=====================================output=====================================
obj = {
  foo: "",
  1: "",
};

obj = {
  bar: "",
  1: "",
};

obj = {
  "foo-bar": "",
  1: "",
};

================================================================================
`;

exports[`with_numbers.js - {"quoteProps":"consistent","singleQuote":true} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "consistent"
singleQuote: true
                                                                                | printWidth
=====================================input======================================
obj = {
  foo: "",
  1: ""
};

obj = {
  "bar": "",
  1: ""
};

obj = {
  "foo-bar": "",
  1: ""
};

=====================================output=====================================
obj = {
  foo: '',
  1: '',
};

obj = {
  bar: '',
  1: '',
};

obj = {
  'foo-bar': '',
  1: '',
};

================================================================================
`;

exports[`with_numbers.js - {"quoteProps":"consistent"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "consistent"
                                                                                | printWidth
=====================================input======================================
obj = {
  foo: "",
  1: ""
};

obj = {
  "bar": "",
  1: ""
};

obj = {
  "foo-bar": "",
  1: ""
};

=====================================output=====================================
obj = {
  foo: "",
  1: "",
};

obj = {
  bar: "",
  1: "",
};

obj = {
  "foo-bar": "",
  1: "",
};

================================================================================
`;

exports[`with_numbers.js - {"quoteProps":"preserve"} format 1`] = `
====================================options=====================================
parsers: ["flow", "babel"]
printWidth: 80
quoteProps: "preserve"
                                                                                | printWidth
=====================================input======================================
obj = {
  foo: "",
  1: ""
};

obj = {
  "bar": "",
  1: ""
};

obj = {
  "foo-bar": "",
  1: ""
};

=====================================output=====================================
obj = {
  foo: "",
  1: "",
};

obj = {
  "bar": "",
  1: "",
};

obj = {
  "foo-bar": "",
  1: "",
};

================================================================================
`;
